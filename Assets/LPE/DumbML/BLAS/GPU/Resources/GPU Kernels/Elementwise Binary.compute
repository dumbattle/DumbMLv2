#pragma kernel Add
#pragma kernel Add_InplaceL
#pragma kernel Add_InplaceR
#pragma kernel Add_Self
#pragma kernel Add_SelfInplace

#pragma kernel Max
#pragma kernel Max_InplaceL
#pragma kernel Max_InplaceR
#pragma kernel Max_Self
#pragma kernel Max_SelfInplace

#pragma kernel Min
#pragma kernel Min_InplaceL
#pragma kernel Min_InplaceR
#pragma kernel Min_Self
#pragma kernel Min_SelfInplace

#pragma kernel Multiply
#pragma kernel Multiply_InplaceL
#pragma kernel Multiply_InplaceR
#pragma kernel Multiply_Self
#pragma kernel Multiply_SelfInplace

#pragma kernel Subtract
#pragma kernel Subtract_InplaceL
#pragma kernel Subtract_InplaceR
#pragma kernel Subtract_Self
#pragma kernel Subtract_SelfInplace


#define BUILD(n) \
    [numthreads(64, 1, 1)]\
    void n(uint3 id : SV_DispatchThreadID) {\
        if (id.x > (uint)count) {\
            return;\
        }\
        _##n(left, right, output, id.x);\
    }\
    [numthreads(64, 1, 1)]\
    void n##_InplaceL(uint3 id : SV_DispatchThreadID) {\
        if (id.x > (uint)count) {\
            return;\
        }\
        _##n(left, right, left, id.x);\
    }\
    [numthreads(64, 1, 1)]\
    void n##_InplaceR(uint3 id : SV_DispatchThreadID) {\
        if (id.x > (uint)count) {\
            return;\
        }\
        _##n(left, right, right, id.x);\
    }\
    [numthreads(64, 1, 1)]\
    void n##_Self(uint3 id : SV_DispatchThreadID) {\
        if (id.x > (uint)count) {\
            return;\
        }\
        _##n(left, left, output, id.x);\
    }\
    [numthreads(64, 1, 1)]\
    void n##_SelfInplace(uint3 id : SV_DispatchThreadID) {\
        if (id.x > (uint)count) {\
            return;\
        }\
        _##n(left, left, left, id.x);\
    }


RWStructuredBuffer<float> left;
RWStructuredBuffer<float> right;
RWStructuredBuffer<float> output;
int count;

int lrank;
int rrank;
int drank;
int stride;

int batchCountL;
int batchCountR;

int4 lshape[16];
int4 rshape[16];
int4 oshape[16];



uint GetLShape(uint ind) {
    return lshape[ind / 4][ind % 4];
}
uint GetRShape(uint ind) {
    return rshape[ind / 4][ind % 4];
}
uint GetOShape(uint ind) {
    return oshape[ind / 4][ind % 4];
}



uint2 GetIndices(uint x) {
    uint ind_raw = x;

    uint batch = ind_raw / stride; // which batch are we on
    uint batch_ind = ind_raw % stride; // index inside that batch

    uint lind = 0;
    uint rind = 0;
    uint remaining = batch;
    uint strideO = (uint)count / (uint)stride;
    uint strideL = batchCountL;
    uint strideR = batchCountR;

    for (int j = drank; j > 0; j--) {
        int ll = lrank - j;
        int rr = rrank - j;
        int dd = drank - j;

        uint lsize = ll >= 0 ? GetLShape(ll) : 1;
        uint rsize = rr >= 0 ? GetRShape(rr) : 1;
        uint dsize = GetOShape(dd);

        strideO /= dsize;
        strideL /= lsize;
        strideR /= rsize;

        if (stride == 0) {
            break;
        }

        uint ind = remaining / strideO; // value at this index
        remaining %= strideO;


        // if broadcast (ie. shape is 1), do not update ind
        if (lsize != 1) {
            lind += ind * strideL;
        }
        if (rsize != 1) {
            rind += ind * strideR;
        }
    }

    uint loffset = stride * lind + batch_ind;
    uint roffset = stride * rind + batch_ind;
    return uint2(loffset, roffset);
}

void _Add(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] + r[xx[1]];
}
void _Max(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    float a = l[xx[0]];
    float b = r[xx[1]];
    o[x] = a > b ? a : b;
}
void _Min(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    float a = l[xx[0]];
    float b = r[xx[1]];
    o[x] = a < b ? a : b;
}
void _Multiply(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] * r[xx[1]];
}
void _Subtract(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] - r[xx[1]];
}


BUILD(Add)
BUILD(Max)
BUILD(Min)
BUILD(Multiply)
BUILD(Subtract)
