#pragma kernel Add
#pragma kernel Add_InplaceL
#pragma kernel Add_InplaceR
#pragma kernel Add_Self
#pragma kernel Add_SelfInplace

#pragma kernel Divide
#pragma kernel Divide_InplaceL
#pragma kernel Divide_InplaceR
#pragma kernel Divide_Self
#pragma kernel Divide_SelfInplace

#pragma kernel Max
#pragma kernel Max_InplaceL
#pragma kernel Max_InplaceR
#pragma kernel Max_Self
#pragma kernel Max_SelfInplace

#pragma kernel Min
#pragma kernel Min_InplaceL
#pragma kernel Min_InplaceR
#pragma kernel Min_Self
#pragma kernel Min_SelfInplace

#pragma kernel Multiply
#pragma kernel Multiply_InplaceL
#pragma kernel Multiply_InplaceR
#pragma kernel Multiply_Self
#pragma kernel Multiply_SelfInplace

#pragma kernel Subtract
#pragma kernel Subtract_InplaceL
#pragma kernel Subtract_InplaceR
#pragma kernel Subtract_Self
#pragma kernel Subtract_SelfInplace

#pragma kernel Equals
#pragma kernel Equals_Self

#pragma kernel NotEquals
#pragma kernel NotEquals_Self

#pragma kernel LessThan
#pragma kernel LessThan_Self

#pragma kernel LessThanOrEquals
#pragma kernel LessThanOrEquals_Self

#pragma kernel GreaterThan
#pragma kernel GreaterThan_Self

#pragma kernel GreaterThanOrEquals
#pragma kernel GreaterThanOrEquals_Self

#include "includes/ElementwiseBinaryBuilds.cginc"



void _Add(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] + r[xx[1]];
}
void _Divide(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] / (r[xx[1]]);
}
void _Max(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    float a = l[xx[0]];
    float b = r[xx[1]];
    o[x] = a > b ? a : b;
}
void _Min(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    float a = l[xx[0]];
    float b = r[xx[1]];
    o[x] = a < b ? a : b;
}
void _Multiply(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] * r[xx[1]];
}
void _Subtract(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<float> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] - r[xx[1]];
}

BUILD_AAA(Add, float, float, float)
BUILD_AAA(Divide, float, float, float)
BUILD_AAA(Max, float, float, float)
BUILD_AAA(Min, float, float, float)
BUILD_AAA(Multiply, float, float, float)
BUILD_AAA(Subtract, float, float, float)



void _Equals(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] == r[xx[1]];
}
void _NotEquals(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] != r[xx[1]];
}
void _LessThan(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] < r[xx[1]];
}
void _LessThanOrEquals(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] <= r[xx[1]];
}
void _GreaterThan(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] > r[xx[1]];
}
void _GreaterThanOrEquals(RWStructuredBuffer<float> l, RWStructuredBuffer<float> r, RWStructuredBuffer<bool> o, uint x) {
    uint2 xx = GetIndices(x);
    o[x] = l[xx[0]] >= r[xx[1]];
}

BUILD_AAB(Equals, float, float, bool)
BUILD_AAB(NotEquals, float, float, bool)
BUILD_AAB(LessThan, float, float, bool)
BUILD_AAB(LessThanOrEquals, float, float, bool)
BUILD_AAB(GreaterThan, float, float, bool)
BUILD_AAB(GreaterThanOrEquals, float, float, bool)
