#pragma kernel MatMult


RWStructuredBuffer<float> left;
RWStructuredBuffer<float> right;
RWStructuredBuffer<float> output;

// int[] doesn't work (each element must a multiple of 16), we have workaround
int4 lshape[16]; 
int4 rshape[16];
int4 oshape[16];

int lrank;
int rrank;
int orank;

// matrix mult dims
int mDim;
int innerDim;
int nDim;
int batchCountL;
int batchCountR;

bool transposeL;
bool transposeR;

// output size
int count;

uint GetLShape(uint ind) {
    return lshape[ind / 4][ind % 4];
}
uint GetRShape(uint ind) {
    return rshape[ind / 4][ind % 4];
}
uint GetOShape(uint ind) {
    return oshape[ind / 4][ind % 4];
}


[numthreads(64, 1, 1)]
void MatMult(uint3 id : SV_DispatchThreadID) {
    if (id.x > (uint)count) {
        return;
    }

    uint matSize = mDim * nDim;

    uint ind_raw = id.x;

    uint batch = ind_raw / matSize; // which batch are we on
    uint batch_ind = ind_raw % matSize; // index inside that batch

    uint _;


    uint ldims = lrank;
    uint rdims = rrank;
    uint ddims = orank;

    uint lx = GetLShape(transposeL ? ldims - 1 : ldims - 2);
    uint ly = GetLShape(transposeL ? ldims - 2 : ldims - 1);
    uint rx = GetRShape(transposeR ? rdims - 1 : rdims - 2);
    uint ry = GetRShape(transposeR ? rdims - 2 : rdims - 1);

    // get left right batches
    uint lind = 0;
    uint rind = 0;
    uint remaining = batch;
    uint stride = count / matSize;
    uint strideL = batchCountL;
    uint strideR = batchCountR;


    for (int j = ddims; j > 2; j--) {
        int ll = ldims - j;
        int rr = rdims - j;
        int dd = ddims - j;

        uint lsize = ll >= 0 ? GetLShape(ll) : 1;
        uint rsize = rr >= 0 ? GetRShape(rr) : 1;
        uint dsize = GetOShape(dd);

        stride /= dsize;
        strideL /= lsize;
        strideR /= rsize;
        uint ind = remaining / stride; // value at this index
        remaining %= stride;

    
        // if broadcast (ie. shape is 1), do not update ind
        if (lsize != 1) {
            lind += ind * strideL;
        }
        if (rsize != 1) {
            rind += ind * strideR;
        }
    }

    // compute 
    uint loffset = lx * ly * lind;
    uint roffset = rx * ry * rind;
    uint doffset = lx * ry * batch;

    int lxStride = transposeL ? 1 : ly;
    int liStride = transposeL ? lx : 1;

    int riStride = transposeR ? 1 : ry;
    int ryStride = transposeR ? rx : 1;


    uint x = batch_ind / ry;
    uint y = batch_ind % ry;

    float sum = 0;
    uint ri = y * ryStride + roffset;
    uint li = x * lxStride + loffset;

    for (int k = 0; k < innerDim; k++) {
        float a = left[li];
        float b = right[ri];
        sum += a * b;
        ri += riStride;
        li += liStride;
    }
    output[id.x] = sum;
}

